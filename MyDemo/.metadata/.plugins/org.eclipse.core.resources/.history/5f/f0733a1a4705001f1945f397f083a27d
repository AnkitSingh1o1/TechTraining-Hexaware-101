package com.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.dto.AccountAndCustomer;
import com.exception.InsufficientFundException;
import com.exception.InvalidAccountException;
import com.exception.OverDraftLimitExcededException;
import com.model.Account;
import com.model.Customer;
import com.utility.DBConnection;

public class ICustomerServiceProviderImpl implements ICustomerServiceProvider{

	@Override
	public float getAccountBalance(long accountNumber) throws SQLException, InvalidAccountException {
		Connection con = DBConnection.dbConnect();
		String sql = "select * from Account where account_id = ?";
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setLong(1, accountNumber);

		ResultSet rst = pstmt.executeQuery();
		float balance = rst.getFloat("account_balance");
		
		DBConnection.dbClose();
		return balance;
	}

	@Override
	public int deposit(long accountNumber, float amount) throws SQLException, InvalidAccountException {
		Connection con = DBConnection.dbConnect();
		
		//get current amount in that account
		float currAmount = getAccountBalance(accountNumber);
		
		
		String sql = "update account " 
		+ "set accountBalance = ?"
		+"where account_id = ?";

		// prepare statement
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setFloat(1, amount+currAmount);
		pstmt.setFloat(2, accountNumber);
		
		int status = pstmt.executeUpdate(); // 1 - updates/ 0 - not updated

		DBConnection.dbClose();
		return status;
		
	}

	@Override
	public int withdraw(long accountNumber, float amount)
			throws SQLException, InvalidAccountException, InsufficientFundException, OverDraftLimitExcededException {
		Connection con = DBConnection.dbConnect();
		
		//get current amount in that account
		float currAmount = getAccountBalance(accountNumber);
		
		Account account = getDetails(accountNumber);
		
		
		if(account.getAccount_type().equals("current"))
		throw new OverDraftLimitExcededException(null);
		
		if(currAmount < amount) 
		throw new InsufficientFundException(null);
		
		
		String sql = "update account " 
		+ "set accountBalance = ?"
		+"where account_id = ?";

		// prepare statement
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setFloat(1, currAmount-amount);
		pstmt.setFloat(2, accountNumber);
		
		int status = pstmt.executeUpdate(); // 1 - updates/ 0 - not updated

		DBConnection.dbClose();
		return status;
	}

	@Override
	public int transfer(long from_account_no, long to_account_no, float amount)
			throws SQLException, InvalidAccountException, InsufficientFundException, OverDraftLimitExcededException {
		Connection con = DBConnection.dbConnect();
		
		int s1 = withdraw(from_account_no, amount);
		int s2 = deposit(to_account_no, amount);
		
		return s1 & s2;
	}

	@Override
	public Account getDetails(long accountNumber) throws SQLException {
		Connection con = DBConnection.dbConnect();
		String sql = "select * from Account where account_id = ?";
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setLong(1, accountNumber);

		ResultSet rst = pstmt.executeQuery();
		int id = rst.getInt("account_id");
		String type = rst.getString("account_type");
		double balance = rst.getDouble("account_balance");
		int cId = rst.getInt("customer_id");
		Account account = new Account(id, type, balance, cId);
		
		DBConnection.dbClose();
		return account;
	}

	@Override
	public AccountAndCustomer getAccountDetails(long accountNumber) throws SQLException {
		
		Connection con = DBConnection.dbConnect();
		String sql = "select * from account a join cusotmer c where account_id = ?";
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setLong(1, accountNumber);

		ResultSet rst = pstmt.executeQuery();
		int id = rst.getInt("account_id");
		String type = rst.getString("account_type");
		double balance = rst.getDouble("account_balance");
		int cId = rst.getInt("customer_id");
		Account account = new Account(id, type, balance, cId);
		
		DBConnection.dbClose();
		return account;
	}

}
